#!/bin/bash


database='onelife_tickets'
username='php'
password="{{ php_password }}"


# make sure user is root
if [[ $EUID -ne 0 ]]; then
        echo "This script must be run as root."
        exit 1
fi


if [[ -z "${1}" ]]; then
	echo ''
	echo "Please refer to --help."
	echo ''
fi

if [[ ${1} == "start" ]]; then
	cd /opt/onelife/OneLife/server/
	/opt/onelife/OneLife/server/OneLifeServer
elif [[ ${1} == "--help" ]]; then

	echo ''
	echo "This is a command line utility for managing the one hour one life server."
	echo ''
	echo "Usage:"
	echo ''
	echo "	onelife set-version <version_number>:"
        echo "		Sets the version for the server. This must match the" 
	echo "		version that the client is running. The client's"
	echo "		version number can be found in the dataVersionNumber.txt"
	echo "		file on the client machine."
	echo ''
	echo "	onelife get-version:"
	echo "		Shows the version of the game the server is running."
	echo ''
	echo "	onelife start:"
	echo "		This starts the server. Use Ctrl+z to end it gracefully."
	echo ''
	echo "	onelife install:"
	echo "		This will install the server." 
	echo ''
	echo "	onelife uninstall:"
	echo "		Removes the server and all configuation files to free up space."
	echo ''
        echo "	onelife reinstall:" 
	echo "		This is equivalent to using uninstall and then install. It's useful" 
	echo "		if you want to clean out server logs and reset the map."
	echo "		Note: reconfigure is significantly faster if you are only wanting" 
	echo "		to reconfigure the server."
	echo ''
	echo "	onelife reconfigure:"
	echo "		This will reconfigure the server using the walkthrough installation."
       	echo "		It is also the recommened way to update an exising server, but does"
        echo "		wipe the map."	
	echo ''
	echo "	onelife set-password <password>:"
	echo "		Sets the password for the server. Clients connecting will need to"
	echo "		have this password saved in their settings\\serverPassword.ini file."
	echo "		Clients will also need to login using an email or key. The email or"
	echo "		key can be anything, but both fields can not be empty. The server "
	echo "		needs to be restarted for this setting to take affect."
	echo ''
	echo "	onelife get-password:"
	echo "		Reveals the server's password. Unfortunately the server does not"
	echo "		provide any method of storing the password in a hashed form."
	echo "		Its recommended that you use a password for your server that"
	echo "		is not used anywhere else."
	echo ''
	echo "	onelife clear-password:"
	echo "		Clears the server's password. Restart is needed for changes to"
	echo "		take affect."
	echo ''
	echo "	onelife play:"
	echo "		Starts the client."
	echo ''
	echo "	onelife showuser <optional_email>:"
	echo "		Shows the user's email and key if server is setup with a ticketing system and if"
	echo "		the account exist. This utility only shows unblocked/active users. If no email"
	echo "		is provided then the utility displays all unblocked users."
	echo ''
	echo "	onelife adduser <email> <optional_key>:"
	echo "		Creates an unblocked user. If no key is provided, the utility will generate"
	echo "		a cryptography secure 30 character key and display it to the console. This"
	echo "		is the recommended method. This key can be added to the clients accountKey.ini"
	echo " 		if the user wishes to do so, vs copying and pasting. If utility is used on an"
	echo "		existing email, a second key is created for them and the client can login"
	echo "		using both."
	echo ''
	echo "	onelife blockuser <email>:"
	echo "		Will prevent the user from logging in, but preserves their account email and key."
	echo ''
	echo "	onelife unblockuser <email>:"
	echo "		Allows a perviously blocked user to be able to log back in."
	echo ''
	echo "	onelife resetuser <email> <optional_key>:"
	echo "		Deletes all accounts for provided email and creates a new one."
	echo ''
	echo "Author:"
	echo ''
	echo "Andrew Klassen"
	echo "aklassen80@yahoo.com"
	echo ''	

elif [[ ${1} == set-version ]]; then
	if [[ ! -z "${2}" ]]; then
		echo "${2}" > /opt/onelife/OneLife/server/serverCodeVersionNumber.txt
	else
		echo ''
		echo "What version?"
	        echo "syntax: onelife set-version <version_number>"
		echo ''
	fi
elif [[ ${1} == blockuser ]]; then
        if [[ ! -z "${2}" ]]; then
                	
		mysql -u ${username} -p${password} -D ${database} -e "UPDATE ticketServer_tickets SET blocked='1' WHERE email ='${2}';" 2> /dev/null

        else
                echo ''
                echo "What user?"
                echo "syntax: onelife blockuser <email>"
                echo ''
        fi
elif [[ ${1} == unblockuser ]]; then
        if [[ ! -z "${2}" ]]; then
                        
                mysql -u ${username} -p${password} -D ${database} -e "UPDATE ticketServer_tickets SET blocked='0' WHERE email ='${2}';" 2> /dev/null

        else
                echo ''
                echo "What user?"
                echo "syntax: onelife unblockuser <email>"
                echo ''
        fi
elif [[ ${1} == showuser ]]; then
	if [[ -z "${2}" ]]; then
		mysql -u ${username} -p${password} -D ${database} -e "SELECT email, ticket_id as \`key\` FROM ticketServer_tickets WHERE blocked = 0;" 2> /dev/null

	else
		mysql -u ${username} -p${password} -D ${database} -e "SELECT email, ticket_id as \`key\` FROM ticketServer_tickets WHERE blocked = 0 AND email = '${2}'" 2> /dev/null	
	fi
elif [[ ${1} == resetuser ]]; then
        if [[ ! -z "${2}" ]]; then

                mysql -u ${username} -p${password} -D ${database} -e "DELETE FROM ticketServer_tickets WHERE email='${2}';" 2> /dev/null

		
		if [[ -z "${3}" ]]; then
                        ticket_password=$(head /dev/urandom | tr -dc A-HJ-NP-Z2-9 | head -c 25 ;)
                else
                        ticket_password=${3}
                fi

                duplicate_detected=$(mysql -u ${username} -p${password} -D ${database} -N -e "SELECT COUNT(*) FROM ticketServer_tickets WHERE ticket_id = UPPER('${3}');" 2> /dev/null)

                if [[ ${duplicate_detected} != '0' ]];then
                        echo ''
                        echo "Duplicate key exists."
                        echo ''
                        exit 1
                fi

                mysql -u ${username} -p${password} -D ${database} -e "INSERT INTO ticketServer_tickets (ticket_id, sale_date, last_download_date, name, email, order_number, tag, coupon_code, email_sent, blocked, download_count, email_opt_in) VALUES ('${ticket_password}', '1970-01-01 00:00:01', '1970-01-01 00:00:01', 'name', '${2}', '0', '0', '0', '0', '0', '0', '0');" 2> /dev/null

                echo ''
                echo "User: ${2}"
                echo "Key: ${ticket_password}"  
                echo ''
        else
                echo ''
                echo "What user?"
                echo "syntax: onelife resetuser <email>"
                echo ''
        fi	
elif [[ ${1} == adduser ]]; then
        if [[ ! -z "${2}" ]]; then
		
		if [[ ${2} != *"@"* ]]; then
			echo "Email needs to be in the form of an email. <something>@<something>"
			exit 1
		fi

		if [[ -z "${3}" ]]; then
			ticket_password=$(head /dev/urandom | tr -dc A-HJ-NP-Z2-9 | head -c 25 ;)
		else
			ticket_password=${3}
		fi

		duplicate_detected=$(mysql -u ${username} -p${password} -D ${database} -N -e "SELECT COUNT(*) FROM ticketServer_tickets WHERE ticket_id = UPPER('${3}');" 2> /dev/null)

		if [[ ${duplicate_detected} != '0' ]];then
			echo ''
			echo "Duplicate key exists."
			echo ''
			exit 1

		fi
		
		mysql -u ${username} -p${password} -D ${database} -e "INSERT INTO ticketServer_tickets (ticket_id, sale_date, last_download_date, name, email, order_number, tag, coupon_code, email_sent, blocked, download_count, email_opt_in) VALUES ('${ticket_password}', '1970-01-01 00:00:01', '1970-01-01 00:00:01', 'name', '${2}', '0', '0', '0', '0', '0', '0', '0');" 2> /dev/null
        	
		echo ''
		echo "Created user: ${2}"
	        echo "Key: ${ticket_password}"	
		echo ''
	else
                echo ''
                echo "What email?"
                echo "syntax: onelife adduser <email> <optional_key>"
                echo ''
        fi
elif [[ ${1} == get-version ]]; then
	cat /opt/onelife/OneLife/server/serverCodeVersionNumber.txt
elif [[ ${1} == install ]]; then
	cd /usr/sbin/onelife_easy_install
	./install
elif [[ ${1} == uninstall ]]; then
	rm -rf /opt/onelife
elif [[ ${1} == reinstall ]]; then
	rm -rf /opt/onelife
	cd /usr/sbin/onelife_easy_install
        ./install
elif [[ ${1} == reconfigure ]]; then
	cd /usr/sbin/onelife_easy_install
        ./install walkthrough
elif [[ ${1} == play ]]; then
	cd /opt/onelife
	/opt/onelife/OneLifeApp
elif [[ ${1} == clearlog ]]; then
	> /opt/onelife/OneLife/server/log.txt
elif [[ ${1} == switch-window-mode ]]; then
	current_mode=$(cat /opt/onelife/settings/fullscreen.ini)
	((current_mode ^= 1))
	echo $current_mode > /opt/onelife/settings/fullscreen.ini
elif [[ ${1} == map ]]; then

	array_does_not_contain () { 
    		local array="$1[@]"
    		local seeking=$2
    		local in=1
    
    		for element in "${!array}"; do
        	if [[ $element == *"${seeking}"* ]]; then
            		in=0
            		break
        	fi
    		done
    		echo $in
		return $in
	}


	while true; 
	do

		players=($(grep "connected as player" /opt/onelife/OneLife/server/log.txt | cut -f16 -d' '))
		player_ids=($(grep "connected as player" /opt/onelife/OneLife/server/log.txt | cut -f20 -d' '))

		players_map=()
	
		for (( i=${#players[@]}-1 ; i>=0 ; i-- )) ;
        	do
	
	       		if_not_exists=$(array_does_not_contain players_map "${players[i]}")
	       
               		if  [[ ${if_not_exists} != 0 ]]; then
				players_map+=("${players[i]},${player_ids[i]}")
	       		fi
               
        	done


		for i in "${players_map[@]}"
		do
   		
			player_name=$(echo $i | cut -f1 -d',')
			player_id=$(echo $i | cut -f2 -d',')
			player_x=$(grep "${player_id}: MOVE" /opt/onelife/OneLife/server/log.txt | tail -1 | cut -f20 -d' ')
			player_y=$(grep "${player_id}: MOVE" /opt/onelife/OneLife/server/log.txt | tail -1 | cut -f21 -d' ')
			echo "${player_name}: ${player_x}x, ${player_y}y"
   
		done
	
		sleep 1
		clear

	done

elif [[ ${1} == set-password ]]; then
	if [[ ! -z "${2}" ]]; then
                echo "${2}" > /opt/onelife/OneLife/server/settings/clientPassword.ini
		echo "1" > /opt/onelife/OneLife/server/settings/requireClientPassword.ini
        else
                echo ''
                echo "What should I use as the password?"
                echo "syntax: onelife set-password <password>"
                echo ''
        fi
elif [[ ${1} == get-password ]]; then
	cat /opt/onelife/OneLife/server/settings/clientPassword.ini
elif [[ ${1} == clear-password ]]; then
	echo "0" > /opt/onelife/OneLife/server/settings/requireClientPassword.ini
fi
